using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using System.Data.Entity;
using QuanLyBaoHiem.Models;
using QuanLyBaoHiem.DAO;
using System.IO;
using System.Data.SqlClient;

namespace QuanLyBaoHiem
{
    public partial class ucQuanLyThongTinNhanVien : DevExpress.XtraEditors.XtraUserControl
    {
        QLBHContext db = new QLBHContext();
        public string manvhientai = "";
        List<ChucVu> listchucvu = new List<ChucVu>();
        public ucQuanLyThongTinNhanVien()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            QuanLyBaoHiem.Models.QLBHContext dbContext = new QuanLyBaoHiem.Models.QLBHContext();
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            dbContext.NhanViens.LoadAsync().ContinueWith(loadTask =>
            {
                // Bind data to control when loading complete
                dgvNhanVien.DataSource = dbContext.NhanViens.Where(p => p.Status == true).ToList();
            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());


            
            
            loadcomboboxMaCVvacomboboxQuyenhanvacomboboxMaNVQL();
            //gridView1.ShowFindPanel();
        }

        public ucQuanLyThongTinNhanVien(string manv)
        {
            InitializeComponent();
            manvhientai = manv;
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            QuanLyBaoHiem.Models.QLBHContext dbContext = new QuanLyBaoHiem.Models.QLBHContext();

            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            dbContext.NhanViens.LoadAsync().ContinueWith(loadTask =>
            {   
                // Bind data to control when loading complete
                dgvNhanVien.DataSource = dbContext.NhanViens.Where(p => p.Status == true).Where(p => p.MaNVQuanLi ==manv).ToList();
            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());


            
            
            loadcomboboxMaCVvacomboboxQuyenhanvacomboboxMaNVQL();
            //gridView1.ShowFindPanel();
        }


        public void loadcomboboxMaCVvacomboboxQuyenhanvacomboboxMaNVQL()
        {
            var listmacv = db.ChucVus.ToList();
            listchucvu = listmacv;

            string macvnguoidangsudung = db.NhanViens.Where(p => p.MaNV == manvhientai).Select(l => l.MaCV).SingleOrDefault();
            var listmanvql = db.NhanViens.Where(p => p.MaCV == macvnguoidangsudung).ToList();
            foreach(var a in listmacv)
            {
                
                cboQuyenHan.Properties.Items.Add(a.TenCV);
            }
            foreach(var a in listmanvql)
            {
                cboMaNVQL.Properties.Items.Add(a.MaNV);
            }
        }


        private void groupControl2_Paint(object sender, PaintEventArgs e)
        {

        }

        private void groupControl1_Paint(object sender, PaintEventArgs e)
        {

        }

        

        private void btnUpdate_Click(object sender, EventArgs e)
        {
            QuanLyBaoHiem.Models.QLBHContext dbContext = new QuanLyBaoHiem.Models.QLBHContext();

            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            dbContext.NhanViens.LoadAsync().ContinueWith(loadTask =>
            {
                // Bind data to control when loading complete
                dgvNhanVien.DataSource = dbContext.NhanViens.Where(p => p.Status == true).Where(p => p.MaNVQuanLi == manvhientai).ToList();
            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
            disabletextbox();
            resettextbox();
        }

        public void loadlaigridview()

        {
            QuanLyBaoHiem.Models.QLBHContext dbContext = new QuanLyBaoHiem.Models.QLBHContext();

            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            dbContext.NhanViens.LoadAsync().ContinueWith(loadTask =>
            {
                // Bind data to control when loading complete
                dgvNhanVien.DataSource = dbContext.NhanViens.Where(p => p.Status == true).Where(p => p.MaNVQuanLi ==  manvhientai).ToList();
            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
        }
        private void cboMaCV_TextChanged(object sender, EventArgs e)
        {
            
        }

        private void cboQuyenHan_TextChanged(object sender, EventArgs e)
        {
            
        }

        private void dgvNhanVien_Click(object sender, EventArgs e)
        {
            txtMaNV.Text = gridView1.GetFocusedRowCellValue(colMaNV).ToString();
            txtHoTenNV.Text= gridView1.GetFocusedRowCellValue(colTenNV).ToString();

            string macv= gridView1.GetFocusedRowCellValue(colMaCV).ToString();
            cboQuyenHan.Text = listchucvu.Where(p => p.MaCV == macv).Select(l => l.TenCV).SingleOrDefault();

            txtSdt.Text= gridView1.GetFocusedRowCellValue(colSdt).ToString();
            txtEmail.Text = gridView1.GetFocusedRowCellValue(colEmail).ToString();
            string gioitinh= gridView1.GetFocusedRowCellValue(colGioiTinh).ToString();
           
            if (gioitinh.Equals("True"))
            {
                cboGioiTinh.SelectedIndex=0;
            }
            else cboGioiTinh.SelectedIndex = 1;
            txtDiaChi.Text= gridView1.GetFocusedRowCellValue(colDiaChi).ToString();
            cboMaNVQL.Text= gridView1.GetFocusedRowCellValue(colMaNVQL).ToString();
            
            string ngaysinh= gridView1.GetFocusedRowCellValue(colNgaySinh).ToString();
            DateTime ngaysinhnhat = DateTime.Parse(ngaysinh);
            dtngaysinh.DateTime = ngaysinhnhat;

            enabletextbox();
            btnLuu.Visible = true;
            btnHuy.Visible = true;

        }

        public void enabletextbox()
        {
            
            txtHoTenNV.Enabled = true;
            txtEmail.Enabled = true;
            txtDiaChi.Enabled = true;
            txtSdt.Enabled = true;
            cboGioiTinh.Enabled = true;
            
            dtngaysinh.Enabled = true;
        }

        public void disabletextbox()
        {
            
            txtHoTenNV.Enabled = false;
            txtEmail.Enabled = false;
            txtDiaChi.Enabled = false;
            txtSdt.Enabled = false;
            cboGioiTinh.Enabled = false;
            
            dtngaysinh.Enabled = false;
        }

        private void btnLuu_Click(object sender, EventArgs e)
        {
            try
            {
                NhanvienDao nvdao = new NhanvienDao();
                bool gioitinh = true;
                if (cboGioiTinh.SelectedIndex == 1)
                {
                    gioitinh = false;
                }
                string macv = listchucvu.Where(p => p.TenCV == cboQuyenHan.Text).Select(l => l.MaCV).SingleOrDefault();

                nvdao.suanhanvien(txtMaNV.Text, macv, txtHoTenNV.Text, txtSdt.Text, gioitinh, txtDiaChi.Text, cboMaNVQL.Text, dtngaysinh.DateTime);

                XtraMessageBox.Show("Đã sửa thành công!!");
                loadlaigridview();
            }

            catch (Exception ex)
            {
                string loi = ex.InnerException.ToString();
                string[] loichia = loi.Split('\n');
                string[] loichinh = loichia[0].Split(':');
                XtraMessageBox.Show(loichinh[2]);
            }
        }

        private void btnThemNV_Click(object sender, EventArgs e)
        {
            FormThemNhanVien f = new FormThemNhanVien(this);
            f.ShowDialog();
        }

        private void btnXoa_Click(object sender, EventArgs e)
        {
            if(txtMaNV.Text=="")
            {
                XtraMessageBox.Show("Bạn chưa chọn dòng!!");
            }
            else
            {
                DialogResult dialogResult = XtraMessageBox.Show("Xác nhận", "Bạn thực sự muốn xóa?", MessageBoxButtons.YesNo);
                if (dialogResult == DialogResult.Yes)
                {
                    NhanvienDao nvdao = new NhanvienDao();
                    nvdao.xoanhanvien(txtMaNV.Text);
                    XtraMessageBox.Show("Đã xóa thành công!!");
                    loadlaigridview();
                    resettextbox();


                }
            }
        }

        public void resettextbox()
        {
            btnHuy.Visible = false;
            btnLuu.Visible = false;

            txtMaNV.Text = "";
            txtHoTenNV.Text = "";
            txtEmail.Text = "";
            txtDiaChi.Text = "";
            txtSdt.Text = "";
            cboGioiTinh.Text = "";
            cboMaNVQL.Text = "";
            cboQuyenHan.Text = "";
            dtngaysinh.Text = "";
        }

        private void ucQuanLyThongTinNhanVien_Load(object sender, EventArgs e)
        {

        }

        private void textEdit1_KeyDown(object sender, KeyEventArgs e)
        {
            
            //gridView1.FindFilterText = textEdit1.Text;
            //XtraMessageBox.Show(textEdit1.Text);
            
        }

        private void textEdit1_TextChanged(object sender, EventArgs e)
        {
            gridView1.FindFilterText = textEdit1.Text;
        }

        private void textEdit1_EditValueChanged(object sender, EventArgs e)
        {

        }

        private void btnHuy_Click(object sender, EventArgs e)
        {
            btnHuy.Visible = false;
            btnLuu.Visible = false;

            txtMaNV.Text = "";
            txtHoTenNV.Text = "";
            txtEmail.Text = "";
            txtDiaChi.Text = "";
            txtSdt.Text = "";
            cboGioiTinh.Text = "";
            cboMaNVQL.Text = "";
            cboQuyenHan.Text = "";
            dtngaysinh.Text = "";

            disabletextbox();
        }

        private void simpleButton1_Click(object sender, EventArgs e)
        {
            
        }

        private void simpleButton6_Click(object sender, EventArgs e)
        {

        }

        private void btnExport_Click(object sender, EventArgs e)
        {
            try
            {
                if(gridView1.RowCount>0)
                {
                    using (SaveFileDialog saveDialog = new SaveFileDialog())
                    {
                        saveDialog.Filter = "Excel (2003)(.xls)|*.xls|Excel (2010) (.xlsx)|*.xlsx ";
                        if (saveDialog.ShowDialog() != DialogResult.Cancel)
                        {
                            string exportFilePath = saveDialog.FileName;
                            string fileExtenstion = new FileInfo(exportFilePath).Extension;

                            switch (fileExtenstion)
                            {
                                case ".xls":
                                    gridView1.ExportToXls(exportFilePath);
                                    break;
                                case ".xlsx":
                                    gridView1.ExportToXlsx(exportFilePath);
                                    break;

                                default:
                                    break;
                            }

                            if (File.Exists(exportFilePath))
                            {
                                try
                                {
                                    //Thử mở file và để chương trình chọn cách để export.
                                    System.Diagnostics.Process.Start(exportFilePath);
                                }
                                catch
                                {
                                    String msg = "Không thể mở file." + Environment.NewLine + Environment.NewLine + "Path: " + exportFilePath;
                                    MessageBox.Show(msg, "Lỗi!", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                }
                            }
                            else
                            {
                                String msg = "File không thể lưu." + Environment.NewLine + Environment.NewLine + "Path: " + exportFilePath;
                                MessageBox.Show(msg, "Lỗi!", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            }
                        }
                    }
                }
                else
                {
                    XtraMessageBox.Show("Không có gì để Export!!");
                }
                

            }
            catch (Exception ex)
            {
                MessageBox.Show("Đã có lỗi" + ex.Message);
            }
        }

        private void simpleButton1_Click_1(object sender, EventArgs e)
        {
            textEdit1.Text = "";
        }
    }
}
